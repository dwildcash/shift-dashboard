@using shift_dashboard.Models

@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@inject shift_dashboard.Models.DashboardConfig dashboardconfig
@model shift_dashboard.Models.Delegate[]

@{
    ViewData["Title"] = dashboardconfig.ApplicationName;
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<title>@dashboardconfig.ApplicationName</title>

@functions{

    // return the account name of previous delegate
    public shift_dashboard.Models.Delegate GetDelegateByRank(int rank)
    {
        return Model.Where(x => x.Rank == rank).FirstOrDefault();
    }
}

@section Scripts
    {


    <!-- Initialize Data Table-->
    <script type="text/javascript">

        (function () {

            /*
             * Natural Sort algorithm for Javascript - Version 0.7 - Released under MIT license
             * Author: Jim Palmer (based on chunking idea from Dave Koelle)
             * Contributors: Mike Grier (mgrier.com), Clint Priest, Kyle Adams, guillermo
             * See: http://js-naturalsort.googlecode.com/svn/trunk/naturalSort.js
             */
            function naturalSort(a, b, html) {
                var re = /(^-?[0-9]+(\.?[0-9]*)[df]?e?[0-9]?%?$|^0x[0-9a-f]+$|[0-9]+)/gi,
                    sre = /(^[ ]*|[ ]*$)/g,
                    dre = /(^([\w ]+,?[\w ]+)?[\w ]+,?[\w ]+\d+:\d+(:\d+)?[\w ]?|^\d{1,4}[\/\-]\d{1,4}[\/\-]\d{1,4}|^\w+, \w+ \d+, \d{4})/,
                    hre = /^0x[0-9a-f]+$/i,
                    ore = /^0/,
                    htmre = /(<([^>]+)>)/ig,
                    // convert all to strings and trim()
                    x = a.toString().replace(sre, '') || '',
                    y = b.toString().replace(sre, '') || '';
                // remove html from strings if desired
                if (!html) {
                    x = x.replace(htmre, '');
                    y = y.replace(htmre, '');
                }
                // chunk/tokenize
                var xN = x.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'),
                    yN = y.replace(re, '\0$1\0').replace(/\0$/, '').replace(/^\0/, '').split('\0'),
                    // numeric, hex or date detection
                    xD = parseInt(x.match(hre), 10) || (xN.length !== 1 && x.match(dre) && Date.parse(x)),
                    yD = parseInt(y.match(hre), 10) || xD && y.match(dre) && Date.parse(y) || null;

                // first try and sort Hex codes or Dates
                if (yD) {
                    if (xD < yD) {
                        return -1;
                    }
                    else if (xD > yD) {
                        return 1;
                    }
                }

                // natural sorting through split numeric strings and default strings
                for (var cLoc = 0, numS = Math.max(xN.length, yN.length); cLoc < numS; cLoc++) {
                    // find floats not starting with '0', string or 0 if not defined (Clint Priest)
                    var oFxNcL = !(xN[cLoc] || '').match(ore) && parseFloat(xN[cLoc], 10) || xN[cLoc] || 0;
                    var oFyNcL = !(yN[cLoc] || '').match(ore) && parseFloat(yN[cLoc], 10) || yN[cLoc] || 0;
                    // handle numeric vs string comparison - number < string - (Kyle Adams)
                    if (isNaN(oFxNcL) !== isNaN(oFyNcL)) {
                        return (isNaN(oFxNcL)) ? 1 : -1;
                    }
                    // rely on string comparison if different types - i.e. '02' < 2 != '02' < '2'
                    else if (typeof oFxNcL !== typeof oFyNcL) {
                        oFxNcL += '';
                        oFyNcL += '';
                    }
                    if (oFxNcL < oFyNcL) {
                        return -1;
                    }
                    if (oFxNcL > oFyNcL) {
                        return 1;
                    }
                }
                return 0;
            }

            jQuery.extend(jQuery.fn.dataTableExt.oSort, {
                "natural-asc": function (a, b) {
                    return naturalSort(a, b, true);
                },

                "natural-desc": function (a, b) {
                    return naturalSort(a, b, true) * -1;
                },

                "natural-nohtml-asc": function (a, b) {
                    return naturalSort(a, b, false);
                },

                "natural-nohtml-desc": function (a, b) {
                    return naturalSort(a, b, false) * -1;
                },

                "natural-ci-asc": function (a, b) {
                    a = a.toString().toLowerCase();
                    b = b.toString().toLowerCase();

                    return naturalSort(a, b, true);
                },

                "natural-ci-desc": function (a, b) {
                    a = a.toString().toLowerCase();
                    b = b.toString().toLowerCase();

                    return naturalSort(a, b, true) * -1;
                }
            });

        }());
        $(document).ready(function () {
            $('#tdelegates').DataTable({
                "pageLength": 101,
                columnDefs: [
                    { type: 'natural-nohtml', targets: 0 }
                ],
                "order": [[0, "asc"]],
                "autoWidth": true,
                responsive: {
                    details: {
                        type: 'column',
                        target: -1
                    }
                },
                columnDefs: [{
                    className: 'control',
                    orderable: false,
                    targets: -1
                }]
            });
        });
    </script>
}

<!-- Content Wrapper. Contains page content -->
<div class="content-wrapper">
    <!-- Content Header (Page header) -->
    <section class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <ol class="breadcrumb float-sm-right">
                        <li class="breadcrumb-item"><a href="#">Home</a></li>
                        <li class="breadcrumb-item active">Index</li>
                    </ol>
                </div>
            </div>
        </div>
        <!-- /.container-fluid -->
    </section>

    <section class="content">

        <!-- Start Delegate Table-->
        <!-- Main content -->
        <div class="row">
            <div class="col-12">
                <div class="box card">
                    <div class="card-header">
                        <h3 class="card-title">Shift Delegates Stats</h3>
                    </div>
                    <!-- /.card-header -->
                    <div class="card-body">
                        <div class="table-responsive">
                            <table id="tdelegates" class="table display dt-responsive" style="width:100%">
                                <thead>
                                    <tr>
                                        <th align-middle data-priority="1">Rank</th>
                                        <th align-middle data-priority="2" class="align-middle">Username</th>
                                        <th align-middle data-priority="4" class="align-middle">Voters</th>
                                        <th align-middle data-priority="6" class="align-middle">Weight</th>
                                        <th align-middle data-priority="7" class="align-middle">Daily Votes Change</th>
                                        <th align-middle data-priority="5" class="align-middle">Votes For next Rank</th>
                                        <th align-middle data-priority="0" class="align-middle"></th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var d in Model)
                                    {
                                        <tr>
                                            <td class="align-middle">
                                                <h6><span class="badge badge-primary"> @d.Rank </span></h6>

                                                @if (d.RankDailyChange > 0)
                                                {
                                                    <small class="badge badge-success">+@d.RankDailyChange</small>
                                                }
                                                else if (d.RankDailyChange < 0)
                                                {
                                                    <small class="badge badge-danger">-@d.RankDailyChange</small>
                                                }
                                            </td>
                                            <td class="align-middle"><h5><small class="text-muted"><a href="https://explorer.shiftnrg.org/address/@d.Address" target="_blank">@d.Username</a></small></h5></td>
                                            <td class="align-middle">
                                                <h5><small class="text-muted">@d.NbVoters</small></h5>

                                                @if (d.VotersDailyChange > 0)
                                                {
                                                    <small class="badge badge-success">+@d.VotersDailyChange</small>
                                                }
                                                else if (d.VotersDailyChange < 0)
                                                {
                                                    <small class="badge badge-danger">-@d.VotersDailyChange</small>
                                                }
                                            </td>
                                            <td class="align-middle"><h5><small class="text-muted">@((long.Parse(d.Vote) / 100000000).ToString("N0"))</small></h5></td>

                                            @if (d.VotesDailyChange >= 0)
                                            {
                                                <td align-middle class="align-middle text-success">@(d.VotesDailyChange.ToString("N0"))</td>
                                            }
                                            else
                                            {
                                                <td align-middle class="align-middle text-danger">@(d.VotesDailyChange.ToString("N0"))</td>
                                            }

                                            @{
                                                long nextrank = 0;

                                                if (d.Rank == 1)
                                                {
                                                    nextrank = 0;
                                                }
                                                else if (d.Rank > 1 && d.Rank <= 303)
                                                {
                                                    var b = GetDelegateByRank(d.Rank + 1);
                                                    nextrank = (long.Parse(GetDelegateByRank(d.Rank - 1).Vote) - long.Parse(d.Vote)) / 100000000;
                                                }
                                                else if (d.Rank >= 303)
                                                {
                                                    nextrank = (long.Parse(GetDelegateByRank(d.Rank - 1).Vote) - long.Parse(d.Vote)) / 100000000;
                                                }
                                            }

                                            <td align-middle class="align-middle text-muted">@nextrank.ToString("N0")</td>
                                            <td></td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
            <!-- /.col -->
        </div>
        <!-- /.row -->
        <!-- ./Delegate Table-->
    </section>
</div>